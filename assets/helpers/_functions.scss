/* ==========================================================================
   Functions
   ========================================================================== */

/* Range function
   ========================================================================== */

/**
 * Define ranges for various things, like media queries. 
 */

@function lower-bound($range){
  @if length($range) <= 0 {
    @return 0;
  }
  @return nth($range,1);
}

@function upper-bound($range) {
  @if length($range) < 2 {
    @return 999999999999;
  }
  @return nth($range, 2);
}

/* Styling
   ========================================================================== */
@function calculateRem($size) {
  $remSize: $size / 10px;
  @return $remSize * 1rem;
}

/* Colors
   ========================================================================== */
@function color-variation($color, $variation: false) {
  
  // Correctly set $color variable:
  @if map-has-key($colors, $color) {
    // $color is in $colors, set variable = map-value
    $color: map-get($colors, $color);
  } @else {
    @if type-of($color) != color {
      // $color is not in $color and $color is not a color
      @error "Invalid color name: `#{$color}`.";
    }
    // $color is a valid color - use it
  }

  @if $variation {
    @if not map-has-key($variations, $variation) {
      // variation is not in $variations
      @error "Invalid $variation: `#{$variation}`.";
    } @else {
       // make it easier to deal with nested map
      $this-variation: map-get($variations, $variation);
      // $args = $function, $color
      $args: $color;
      @if map-get($this-variation, parameters) {
        // $args = $function, $colors, $parameters
        $args: join($args, map-get($this-variation, parameters));
      }

      //@return $args;
      @return call(map-get($this-variation, function), $args...);
    }
  }
  @return $color;
}

@function cv($color, $variation:false) {
  @return color-variation($color, $variation);
}